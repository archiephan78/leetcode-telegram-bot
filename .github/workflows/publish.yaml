name: Build and Release Go üöÄ binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build Go binaries üî®
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Download dependencies
        run: go mod download
        
      - name: Set binary name
        id: binary
        run: |
          BINARY_NAME="leetcode-telegram-bot"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          echo "name=${BINARY_NAME}" >> $GITHUB_OUTPUT
          echo "archive=${BINARY_NAME}-${{ matrix.goos }}-${{ matrix.goarch }}" >> $GITHUB_OUTPUT
          
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          if [ "${{ matrix.goos }}" = "linux" ]; then
            # Install cross-compilation tools for Linux
            sudo apt-get update
            sudo apt-get install -y gcc-multilib
            if [ "${{ matrix.goarch }}" = "arm64" ]; then
              sudo apt-get install -y gcc-aarch64-linux-gnu
              export CC=aarch64-linux-gnu-gcc
            fi
          elif [ "${{ matrix.goos }}" = "darwin" ]; then
            # For macOS cross-compilation, we need to disable CGO for simplicity
            export CGO_ENABLED=0
          elif [ "${{ matrix.goos }}" = "windows" ]; then
            # Install mingw for Windows cross-compilation
            sudo apt-get install -y gcc-mingw-w64
            export CC=x86_64-w64-mingw32-gcc
          fi
          
          go build -ldflags="-s -w -X main.version=${{ github.ref_name }}" -o ${{ steps.binary.outputs.name }} .
          
      - name: Create archive
        run: |
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip ${{ steps.binary.outputs.archive }}.zip ${{ steps.binary.outputs.name }}
          else
            tar -czf ${{ steps.binary.outputs.archive }}.tar.gz ${{ steps.binary.outputs.name }}
          fi
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.binary.outputs.archive }}
          path: |
            ${{ steps.binary.outputs.archive }}.tar.gz
            ${{ steps.binary.outputs.archive }}.zip

  release:
    name: Create GitHub Release üöÄ
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          
      - name: Display structure of downloaded files
        run: ls -la dist/
        
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Generate release notes
          if [ -f CHANGELOG.md ]; then
            RELEASE_NOTES=$(grep -A 20 "## \[${{ github.ref_name }}\]" CHANGELOG.md | sed '/## \[/,$d' | tail -n +2)
          else
            RELEASE_NOTES="Release ${{ github.ref_name }}"
          fi
          
          gh release create \
            "${{ github.ref_name }}" \
            --title "Release ${{ github.ref_name }}" \
            --notes "$RELEASE_NOTES" \
            --draft=false \
            --prerelease=false
            
      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          find dist/ -name "*.tar.gz" -o -name "*.zip" | while read file; do
            gh release upload "${{ github.ref_name }}" "$file"
          done

  docker:
    name: Build and push Docker image üê≥
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
